[
  {
    "title": "Primitive Data Types:",
    "table": {
      "headers": ["Type", "Size", "Range", "Example"],
      "rows": [
        ["boolean", "1 bit", "true/false", "boolean isValid = true;"],
        ["byte", "8 bits", "-128 to 127", "byte b = 100;"],
        ["short", "16 bits", "-32,768 to 32,767", "short s = 1000;"],
        ["int", "32 bits", "-2^31 to 2^31-1", "int i = 42;"],
        ["long", "64 bits", "-2^63 to 2^63-1", "long l = 9876543210L;"],
        ["float", "32 bits", "~±3.40282347E+38", "float f = 3.14f;"],
        ["double", "64 bits", "~±1.79769313486231570E+308", "double d = 3.14159;"],
        ["char", "16 bits", "0 to 65,535", "char c = 'A';"]
      ]
    }
  },
  {
    "title": "Reference Types:",
    "table": {
      "headers": ["Type", "Description", "Example"],
      "rows": [
        ["String", "Text sequence", "String name = \"John\";"],
        ["Arrays", "Fixed-size collection", "int[] nums = {1, 2, 3};"],
        ["Class", "Object blueprint", "Person p = new Person();"],
        ["Interface", "Contract definition", "List<String> list = new ArrayList<>();"],
        ["Enum", "Set of constants", "enum Day {MON, TUE, WED}"],
        ["ArrayList", "Dynamic array", "ArrayList<String> list = new ArrayList<>();"],
        ["HashMap", "Key-value pairs", "HashMap<String, Integer> map = new HashMap<>();"]
      ]
    }
  },
  {
    "title": "Control Flow:",
    "table": {
      "headers": ["Statement", "Syntax"],
      "rows": [
        ["if-else", "if (condition) { code } else { code }"],
        ["switch", "switch (var) { case val: code; break; default: code; }"],
        ["for loop", "for (init; condition; update) { code }"],
        ["for-each", "for (Type item : collection) { code }"],
        ["while", "while (condition) { code }"],
        ["do-while", "do { code } while (condition);"],
        ["break", "break; // Exit loop or switch"],
        ["continue", "continue; // Skip to next iteration"]
      ]
    }
  },
  {
    "title": "Object-Oriented Programming:",
    "table": {
      "headers": ["Concept", "Description", "Example"],
      "rows": [
        ["Class", "Blueprint for objects", "class Person { private String name; }"],
        ["Object", "Instance of a class", "Person person = new Person();"],
        ["Constructor", "Initializes objects", "public Person(String name) { this.name = name; }"],
        ["Inheritance", "Extends another class", "class Student extends Person {}"],
        ["Interface", "Contract for classes", "interface Runnable { void run(); }"],
        ["Polymorphism", "Multiple forms", "Shape shape = new Circle(); // Shape reference to Circle object"],
        ["Encapsulation", "Data hiding", "private String ssn; public String getSSN() { return ssn; }"],
        ["Abstract class", "Partial implementation", "abstract class Shape { abstract double area(); }"]
      ]
    }
  },
  {
    "title": "Exception Handling:",
    "table": {
      "headers": ["Component", "Description", "Example"],
      "rows": [
        ["try-catch", "Handle exceptions", "try { code } catch (Exception e) { handleError }"],
        ["try-catch-finally", "Always execute", "try { code } catch (Exception e) { code } finally { cleanup }"],
        ["throw", "Create exception", "throw new IllegalArgumentException(\"Invalid value\");"],
        ["throws", "Declare exceptions", "void method() throws IOException {}"],
        ["try-with-resources", "Auto-closeable", "try (FileReader fr = new FileReader(file)) { code }"],
        ["Checked Exceptions", "Must be handled", "IOException, SQLException"],
        ["Unchecked Exceptions", "Runtime errors", "NullPointerException, ArrayIndexOutOfBoundsException"]
      ]
    }
  },
  {
    "title": "Common Methods:",
    "table": {
      "headers": ["Class", "Method", "Purpose"],
      "rows": [
        ["String", "length(), charAt(), substring()", "String manipulation"],
        ["String", "equals(), equalsIgnoreCase()", "String comparison"],
        ["String", "contains(), startsWith(), endsWith()", "String testing"],
        ["ArrayList", "add(), get(), remove(), size()", "Collection operations"],
        ["HashMap", "put(), get(), containsKey()", "Map operations"],
        ["Arrays", "sort(), binarySearch()", "Array operations"],
        ["Integer/Double", "parseInt(), parseDouble()", "String to number conversion"],
        ["Math", "random(), round(), max(), min()", "Mathematical operations"],
        ["System", "out.println(), currentTimeMillis()", "Output and system functions"]
      ]
    }
  }
]
